Ejercicios Teoria SO
1)
int main(int argc, char *argv[]){
    int i;
    for(i = 1; i <= argc; i++){
        fork();
    }
    / * ... * /
    return 0;
}
argc = 3 
Haz la jerarquia, un diagrama con los procesos que se van creando, cual es el numero de progresos si argc = n
Se crearan 8 procesos hijo (incluido padre) y si es n seria 2^n

(padre) -> crea 3 hijos despues de las 3 iteraciones -> cada hijo crea i -1 hijos
            
. (3) (1)   -> . (2) (2)    -> .  (1) (3)   -> . (0) (4)
                            -> .  (0) (4)
            -> . (1) (3)    -> .  (0) (4)
            -> . (0) (4)

(x) -> x son las iteraciones que le fatarian por ejecutar o hijos a crear, por ejemplo el padre tiene 3 iteraciones,
cre 3 hijos, etc...
(i = y)  


2) las variables locales , que toman valor unicamente en su propio hilo

3) No siempre, por que si existe solo un proceso o *si la politica de planificacion sigue igual* o la prioridad

6)  A) Verdadero
    B) Verdadero
    c) Falso, un unico proceso hace la llamada a pipe, despues hago un  fork y los 2 procesos comparten la pipe
    ejemplo:    
        int tubo[2];
        pipe(tubo);
        if(fork()){
            read(tubo[0], buf, 11);
        }else{
            write(tubo[1], "Hola mundo", 11);
        }

7)  Cierto: c

8)  NoRequisito: alternancia estricta

9) Primer read, no se bloquea ya que hay datos, consume 36 datos, quedandodÂ¡ 42 bytes en la pipe, pero en la segunda read, 
no se bloquea pero solo le 42bytes.

10) 
P1                              P2
accion 1                        pause()     
kill(pid, SIGUSR1);             accion2

11)
P1                              P2
accion1                         wait(1)
signal(1)                       accion2

12)int tubo[2] pipe(tubo) fork
P1                                  P2
Accion1();                          read(tubo[0], &C, sizeof(char))
write(tubo[1], '1', sizeof(char))   Accion2();

13) c_signal c_wait (contunuar = false)
P1                              P2
Accion1();                      lock(m)
lock(m)                         while(continuar != TRUE) -> c_wait(m,c)
continuar=TRUE
c_signal(c)                     Accion2
unlock(m)

14) semaforo = puente, semNumIzq, semIzq / variables = numIzq
EntrarIzquierda(){
    wait(semNumIzq);
    numIzq++;
    if(numIzq==1){
        signal(semNumIzq)
        wait(puente)
    }else{
        signal(semNumIzq)
        wait(semIzq)
    }
}

SalirIzquieda{
    wait(semNumIzq)
    numIzq--
    if(numIzq==0){
        signal(semNumIzq)
        signal(puente)
    }else{
        signal(semNumIzq)
        signal(semIzq)
    }
}

Identico seria para la derecha

15)
C,I                    
P1, P2
P1:reserva(c)
P2:reserva(I)
P1:reserva(I)
P2:reserva(c)
I=[1 1] D=[0 0] 
A = 1  0    =   S = 0   1
    0  1            0   0
S[0] <= D
[0 1] <= [0 0] incorrecto, pero
S[1] <= D
[0 0] <= [0 0] este si
D = D + A[1]


21)
En la de existencias E , hay un 3 cuando deberia de ser 2

22)
Tenemos una solicitud no satisfecha de 2 unidsdes en el recurso 3, no hay ninguna asigacion en el recurso 3 por tanto no podemos confirmar

17)
int result fork();
int fd open(char *path, mode_t mode);
int nbytes read(int fd, char *buff, int count);
int nbytes write(int fd, ...);
int res close;
(kill y sleep)

int r productor(int fd){
    int f = open ("data.txt", RDONLY);
    char buff [1024];
    int r = read(f, buff, 1024);
    write(fd, buff, 1024);
    close(f);
}

int r consumidor(int fd){
    char buff [1024];
    int n = read(fd, buff, 1024);
    printf("%d\n", n);
}

main(){
    int p = fork();
    if(p==0)
        close(f[1])
        consumidor(fd[0])
        close(f[0])
    else    
        p2 = fork()
        if(p2==0)
            productor(f[1])
            exit(0)
        else    
            sleep(60)
            kill()
            kill()
}